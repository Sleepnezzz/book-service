plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.25'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'org.jlleitschuh.gradle.ktlint' version '11.6.1'
}

group = 'com.example'
version = '1.0.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.4'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    runtimeOnly 'com.mysql:mysql-connector-j'
    // Cucumber dependencies
    testImplementation("io.cucumber:cucumber-spring:7.21.1")
    testImplementation("io.cucumber:cucumber-junit:7.21.1")
    testImplementation("io.cucumber:cucumber-java:7.21.1")
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.11.4'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

kotlin {
    compilerOptions {
        freeCompilerArgs.addAll '-Xjsr305=strict'
    }
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy(jacocoTestReport)
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

tasks.register('cucumberCli', JavaExec) {
    dependsOn tasks.named('testClasses') // Ensure test classes are compiled
    classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
    mainClass = 'io.cucumber.core.cli.Main' // Main class for Cucumber CLI
    args = [
            '--plugin', 'pretty',
            '--plugin', 'html:build/reports/cucumber/cucumber.html',
            '--plugin', 'json:build/reports/cucumber/cucumber.json', // Optional: JSON report output
            '--glue', 'com.example.book', // Glue code location
            'src/test/resources' // Feature files location
    ]
    doLast {
        logger.lifecycle("Cucumber test executed with args: ${args}")
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events = ["passed", "skipped", "failed"]
        exceptionFormat = "full"
    }
}

jacocoTestReport {
    dependsOn(test)
    reports {
        xml.required.set(true)
        html.required.set(true)
        html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
    }
    classDirectories.setFrom(fileTree("$buildDir/classes/kotlin/main") {
        exclude 'com/example/book/model/**'
        exclude 'com/example/book/service/exception/*'
        exclude 'com/example/book/config/**'
        exclude 'com/example/book/GlobalExceptionHandler*'
        exclude 'com/example/book/BookServiceApplication*'
    })
    sourceDirectories.setFrom(files("src/main/kotlin"))
    executionData.setFrom(files("$buildDir/jacoco/test.exec"))
}

ktlint {
    filter {
        exclude '**/generated/**'
    }
    disabledRules = [
            "final-newline",                // File must end with a newline
            "no-wildcard-imports",          // No wildcard imports
            "indent",                        // Indentation
            "parameter-list-wrapping",       // Wrap long parameter lists
            "trailing-comma",                // Missing trailing commas
            "no-tab-character",              // Unexpected tab character(s)
            "import-ordering"
    ]
}